{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["InstaGrid","classes","media","status","account","Grid","container","spacing","className","wrapper","map","displayImage","id","postLink","accessibilityCaption","item","xs","sm","md","key","ButtonBase","href","src","alt","image","defaultProps","undefined","compose","withInstagramFeed","withStyles","width","height","Boolean","window","location","hostname","match","ReactDOM","render","numberOfMediaElements","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OA+BQA,EAAY,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,MAAgBC,GAAmB,EAA5BC,QAA4B,EAAnBD,QAC5C,OACE,gBAACE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAAIC,UAAWP,EAAQQ,SAC7CP,GACY,cAAXC,GACAD,EAAMQ,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,GAAIC,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,qBAA/B,OACR,gBAACT,EAAA,EAAD,CAAMU,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,IAAKP,GAAMD,GAC1C,gBAACS,EAAA,EAAD,CACEC,KAAMR,GAAQ,0CAEd,uBACES,IAAKX,EACLY,IAAKT,GAAwB,oBAC7BN,UAAWP,EAAQuB,aAKjB,YAAXrB,GAAwB,uCACb,WAAXA,GAAuB,mDAK9BH,EAAUyB,aAAe,CACvBvB,WAAOwB,GAGIC,UACbC,IACAC,aAtDa,iBAAO,CACpBpB,QAAS,GAGTe,MAAO,CAELM,MAAO,OACPC,OAAQ,YA6CGJ,CAGb3B,GClDkBgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,CAAWlC,QAAQ,cAAcmC,sBAAuB,IAAOC,SAASC,eAAe,SD4HjG,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f10f3004.chunk.js","sourcesContent":["import * as React from 'react';\nimport withInstagramFeed from 'origen-react-instagram-feed';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport compose from 'recompose/compose';\n\nconst styles = () => ({\n  wrapper: {\n\n  },\n  image: {\n    \n    width: '100%',\n    height: '100%',\n\n  },\n});\n \nexport type Props = {\n  media?: Array<{\n    displayImage: string,\n    id?: string,\n    postLink?: string,\n    accessibilityCaption?: string,\n  }>,\n  account: string,\n  classes: { [$Keys<$Call<typeof styles>>]: string },\n  status: 'completed' | 'loading' | 'failed',\n};\n\n  const InstaGrid = ({ classes, media, account, status}: Props) => {\n    return (\n      <Grid container spacing={32} className={classes.wrapper}>\n        {media &&\n          status === 'completed' &&\n          media.map(({ displayImage, id, postLink, accessibilityCaption }) => (\n            <Grid item xs={12} sm={6} md={4} key={id || displayImage}>\n              <ButtonBase\n                href={postLink || `https://www.instagram.com/thankyoudom/`}\n              >\n                <img\n                  src={displayImage}\n                  alt={accessibilityCaption || 'Instagram picture'}\n                  className={classes.image}\n                />\n              </ButtonBase>\n            </Grid>\n          ))}\n        {status === 'loading' && <p>loading...</p>}\n        {status === 'failed' && <p>Check instagram here</p>}\n      </Grid>\n    );\n  };\n   \n  InstaGrid.defaultProps = {\n    media: undefined,\n  };\n\nexport default compose(\n  withInstagramFeed,\n  withStyles(styles),\n)(InstaGrid);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport InstaGrid from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<InstaGrid account=\"thankyoudom\" numberOfMediaElements={9} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}